{
  "Export public api": {
    "scope": "typescript",
    "prefix": "et-expub",
    "body": ["export * from './public-api'"],
    "description": "Export public api"
  },
  "Boolean input property": {
    "scope": "typescript",
    "prefix": "et-bool-prop",
    "body": [
      "  @Input()",
      "  get ${1}(): boolean {",
      "    return this._${1};",
      "  }",
      "  set ${1}(value: BooleanInput) {",
      "    this._${1} = coerceBooleanProperty(value);",
      "  }",
      "  private _${1} = ${0:false};"
    ],
    "description": "Add boolean input property"
  },
  "Boolean signal input property": {
    "scope": "typescript",
    "prefix": "et-bool-s-prop",
    "body": [
      "  @Input()",
      "  get ${1}(): boolean {",
      "    return this._${1}();",
      "  }",
      "  set ${1}(value: BooleanInput) {",
      "    this._${1}.set(coerceBooleanProperty(value));",
      "  }",
      "  private _${1} = signal<boolean>(${0:false});"
    ],
    "description": "Add boolean input property"
  },
  "Boolean reactive input property": {
    "scope": "typescript",
    "prefix": "et-bool-r-prop",
    "body": [
      "  @Input()",
      "  get ${1}(): boolean {",
      "    return this._${1}$.value;",
      "  }",
      "  set ${1}(value: BooleanInput) {",
      "    this._${1}$.next(coerceBooleanProperty(value));",
      "  }",
      "  private _${1}$ = new BehaviorSubject(${0:false});"
    ],
    "description": "Add boolean reactive input property"
  },
  "Number input property": {
    "scope": "typescript",
    "prefix": "et-number-prop",
    "body": [
      "  @Input()",
      "  get ${1}(): number {",
      "    return this._${1};",
      "  }",
      "  set ${1}(value: NumberInput) {",
      "    this._${1} = coerceNumberProperty(value);",
      "  }",
      "  private _${1} = ${0:0};"
    ],
    "description": "Add number input property"
  },
  "Number signal input property": {
    "scope": "typescript",
    "prefix": "et-number-s-prop",
    "body": [
      "  @Input()",
      "  get ${1}(): number {",
      "    return this._${1}();",
      "  }",
      "  set ${1}(value: NumberInput) {",
      "    this._${1}.set(coerceNumberProperty(value));",
      "  }",
      "  private _${1} = signal<number>(${0:0});"
    ],
    "description": "Add number input property"
  },
  "Number reactive input property": {
    "scope": "typescript",
    "prefix": "et-number-r-prop",
    "body": [
      "  @Input()",
      "  get ${1}(): number {",
      "    return this._${1}$.value;",
      "  }",
      "  set ${1}(value: NumberInput) {",
      "    this._${1}$.next(coerceNumberProperty(value));",
      "  }",
      "  private _${1}$ = new BehaviorSubject(${0:0});"
    ],
    "description": "Add number reactive input property"
  },
  "Any input property": {
    "scope": "typescript",
    "prefix": "et-any-prop",
    "body": [
      "  @Input()",
      "  get ${1}() {",
      "    return this._${1};",
      "  }",
      "  set ${1}(value: ${2}) {",
      "    this._${1} = value;",
      "  }",
      "  private _${1}: ${2} = ${3};"
    ],
    "description": "Add any input property"
  },
  "Any signal input property": {
    "scope": "typescript",
    "prefix": "et-any-s-prop",
    "body": [
      "  @Input()",
      "  get ${1}() {",
      "    return this._${1}();",
      "  }",
      "  set ${1}(value: ${2}) {",
      "    this._${1}.set(value);",
      "  }",
      "  private _${1} = signal<${2}>(${3});"
    ],
    "description": "Add any input property"
  },
  "Any reactive input property": {
    "scope": "typescript",
    "prefix": "et-any-r-prop",
    "body": [
      "  @Input()",
      "  get ${1}() {",
      "    return this._${1}$.value;",
      "  }",
      "  set ${1}(value: ${2}) {",
      "    this._${1}$.next(value);",
      "  }",
      "  private _${1}$ = new BehaviorSubject<${2}>(${3});"
    ],
    "description": "Add any reactive input property"
  },
  "Destroy": {
    "scope": "typescript",
    "prefix": "et-destroy",
    "body": "private readonly _destroy$ = createDestroy();"
  },
  "Component": {
    "scope": "typescript",
    "prefix": "et-component",
    "body": [
      "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';",
      "",
      "@Component({",
      "  selector: 'et-${1}',",
      "  templateUrl: './${1}.component.html',",
      "  styleUrls: ['./${1}.component.scss'],",
      "  standalone: true,",
      "  changeDetection: ChangeDetectionStrategy.OnPush,",
      "  encapsulation: ViewEncapsulation.None,",
      "  host: {",
      "    class: 'et-${1}',",
      "  },",
      "  imports: [],",
      "  hostDirectives: [],",
      "})",
      "export class ${0}Component {}"
    ],
    "description": "Add component boilerplate"
  },
  "Component Inline": {
    "scope": "typescript",
    "prefix": "et-component-inline",
    "body": [
      "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';",
      "",
      "@Component({",
      "  selector: 'et-${1}',",
      "  template: ``,",
      "  standalone: true,",
      "  changeDetection: ChangeDetectionStrategy.OnPush,",
      "  encapsulation: ViewEncapsulation.None,",
      "  host: {",
      "    class: 'et-${1}',",
      "  },",
      "  imports: [],",
      "  hostDirectives: [],",
      "})",
      "export class ${0}Component {}"
    ],
    "description": "Add component boilerplate"
  },
  "HostDirective": {
    "scope": "typescript",
    "prefix": "et-host-directive",
    "body": [
      "import { Directive } from '@angular/core';",
      "",
      "@Directive({",
      "  standalone: true,",
      "})",
      "export class ${0}Directive {}"
    ],
    "description": "Add host directive boilerplate"
  }
}
